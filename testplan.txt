You are kick as python developer with a decade of experience in developing and deoploying the python appliocations.
I want you to review these instructions carefully and give the implementation.
Note: this is very critical piece as part of the complaint chat boat application taht the business uses.
So need to have accurate and performance effective code in place. 

Define transition_clarification_revise()

Logic:

Count attempts: Pull from galaxy_chat_history by conversation_id, chat_msg_order, chat_wflow_action_id.
If user selects "continue":
Call classification_prompt with summary, set state to classification_summary.
If user selects "modify":
Compose the clarify/revise question with the attempt message (e.g. “You have 3 of 4 attempts left”).
When user sends new content, call the clarify/revise LLM prompt with:
user input + clarification summary from transition_clarification_summary.
Return LLM output, Modify button, Continue button.
Repeat for up to 4 attempts; after 4th attempt, only allow "Continue".
If "Continue" chosen anytime, call classification_prompt with last revised summary.

Instructions:

1. to get the count of attempts of attempts from the galaxy_chat_history based on the entires for the conversation_id for chat_msg_order & chat_wflow_action_id take reference of chat_history_repository.py
2. to implement the Calrify revise prompt with user input + Clarification summary from the transition_clarification_summary, take the clarification_in_progress_prompt.py as reference 
